xaringan:::inf_mr()
xaringan:::inf_mr()
library(factoextra)
library(lattice)
library(tidyverse)
library(gridExtra)
library(viridis)
theme_set(theme_minimal())
theme_update(
text = element_text(size = 20)
)
library("BiocStyle")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocStyle")
library("BiocStyle")
library("rmarkdown")
options(width = 200, stringsAsFactors = FALSE)
knitr::opts_chunk$set(
message = FALSE, error = FALSE, warning = FALSE,
fig.path = "../figs/",
dev=c("png", "pdf"))
library(factoextra)
library(lattice)
library(tidyverse)
library(gridExtra)
library(viridis)
theme_set(theme_minimal())
theme_update(
text = element_text(size = 20)
)
set.seed(4756)
n <- 1000
d <- 5
p <- 500
sigma <- 1
R1 <- matrix(rnorm(n*d), nrow = n)
R2 <- matrix(rnorm(p*d), nrow = p)
U <- qr.Q(qr(R1))
V <- qr.Q(qr(R2))
sv <- sqrt(n)*c(1.8, 2.1, 2.5, 3.3, 4)
X <- U %*% diag(sv) %*% t(V)
Y <- X + matrix(rnorm(n*p, sd = sigma), ncol = p)
# Compute PCA
pca.res <- prcomp(Y, scale. = FALSE)
set.seed(4756)
n <- 1000
d <- 5
p <- 500
sigma <- 1
R1 <- matrix(rnorm(n*d), nrow = n)
R2 <- matrix(rnorm(p*d), nrow = p)
U <- qr.Q(qr(R1))
V <- qr.Q(qr(R2))
sv <- sqrt(n)*c(1.8, 2.1, 2.5, 3.3, 4)
X <- U %*% diag(sv) %*% t(V)
Y <- X + matrix(rnorm(n*p, sd = sigma), ncol = p)
# Compute PCA
pca.res <- prcomp(Y, scale. = FALSE)
var_explained <- 100*(pca.res$sdev^2)/sum(pca.res$sdev^2)
var_explained[1:10]
fviz_eig(pca.res) + ggtitle("") +
theme(text = element_text(size = 20))
library(RMTstat)
df <- data.frame(sv = pca.res$sdev, eig = pca.res$sdev^2)
mp <- data.frame(eig = seq(0, max(df$eig), length.out = 100)) %>%
mutate(mp = dmp(eig, svr = n/p, var = sigma^2))
ggplot(df, aes(x = eig)) +
geom_histogram(
bins = 80, fill = "grey30", color = "white", lwd =  0.2,
aes(y = ..density..)) +
geom_line(data = mp, aes(y = mp-0.01), color = "royalblue", lwd = 1)
set.seed(834759)
N <- 500
X <- cbind(
x1 = c(rnorm(N, mean = 0, sd = 4.5),
rnorm(N, mean = 20, sd = 4.5)),
y = c(rnorm(N, mean = 0, sd = 1),
rnorm(N, mean = 0, sd = 1))
)
class <-  rep(c("A", "B"), each  = N)
thresh <- 0.2
class <- class[abs(X[, 2]) > thresh]
X <- X[abs(X[, 2]) > thresh, ]
n <- nrow(X)
p <- 50
tmp <- matrix(rnorm(n*n, mean = 0, sd = 1), ncol = n)
tmp.qr <- qr(tmp)
Q <- qr.Q(tmp.qr, complete=TRUE)
Q <- Q[, 1:p]
Y <- X %*% Q[1:2, ]
pca.res <- prcomp(Y, scale = TRUE)
df <- data.frame(X, class)
colnames(df) <- c("x", "y","label")
ggplot(df, aes(x = x, y = y, color = label)) +
geom_point(size = 1) + coord_fixed() +
scale_color_brewer(name = "Group", palette = "Set1") +
theme_minimal()
fviz_pca_ind(pca.res, geom = "point")  +
ggtitle("") + coord_fixed(4) +
theme(text = element_text(size = 30))
fviz_pca_ind(pca.res, geom = "point", col.ind = df$label,
pointsize = 2.5, invisible="quali") + coord_fixed(4) +
scale_shape_manual(name = "Group", values = c(16, 16)) +
scale_color_brewer(name = "Group", palette = "Set1") +
ggtitle("") +
theme(text = element_text(size = 30))
fviz_pca_ind(pca.res, geom = "point")  + xlim(NA, 15) +
ggtitle("") + theme(text = element_text(size = 30))
fviz_pca_ind(pca.res, geom = "point", col.ind = df$label,
pointsize = 2.5, invisible="quali") +
scale_shape_manual(name = "Group", values = c(16, 16)) +
scale_color_brewer(name = "Group", palette = "Set1") +
ggtitle("") + xlim(NA, 15) +
theme(text = element_text(size = 30))
fviz_pca_ind(pca.res, geom = "point") + coord_fixed() +
ggtitle("") + xlim(NA, 15) +
theme(text = element_text(size = 30))
fviz_pca_ind(pca.res, geom = "point", col.ind = df$label, pointsize = 2.5,
invisible="quali") +
scale_shape_manual(name = "Group", values = c(16, 16)) +
scale_color_brewer(name = "Group", palette = "Set1") +
coord_fixed() +  ggtitle("") +
theme(text = element_text(size = 30))
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data"
wine <- read_csv(url, col_names = FALSE)
colnames(wine) <- c("class", "Alcohol", "MalicAcid", "Ash", "AlcAsh", "Mg",
"Phenols", "Flav", "NonFlavPhenols", "Proa", "Color",
"Hue", "OD", "Proline")
head(wine)
# OD variable is = OD280/OD315 of diluted wines
# note that Nebbiolo is a grape variety for Barolo
wine.class <- factor(
wine$class,
levels = c(1, 2, 3),
labels = c("Nebbiolo", "Grignolino", "Barbera"))
wine <- wine[,-1]
table(wine.class)
?prcomp
winePCA <- prcomp(wine, scale = TRUE)
fviz_eig(winePCA)
fviz_pca_var(winePCA, labelsize = 7) +
ggtitle("") + theme(text = element_text(size = 25))
fviz_contrib(winePCA, choice = "var", axes = 1) +
ggtitle("") + theme(text = element_text(size = 25))
#eig_ratio <- winePCA$eig[2]/winePCA$eig[1]
fviz_pca_ind(winePCA) +
coord_fixed() + theme(text = element_text(size = 25))
fviz_pca_biplot(pointsize = 2.5,
winePCA, geom = "point",
labelsize = 8, col.var = "#c07d44") +
coord_fixed() + ggtitle("") +
ylim(-4.5, 4.5) + xlim(-5, 5) +
theme(text = element_text(size = 25))
fviz_pca_ind(winePCA, col.ind = wine.class, pointsize = 2.5,
ellipse.type = "convex", addEllipses = TRUE, labelsize = 6) +
scale_fill_brewer(name = "Grape variety", palette = "Set1") +
scale_color_brewer(name = "Grape variety", palette = "Set1") +
scale_shape_manual(name = "Grape variety", values = c(16, 16, 16)) +
coord_fixed() +  ggtitle("") +  ylim(-4, 4) +
guides(color = "none", fill = "none", shape = "none") +
theme(text = element_text(size = 25))
fviz_pca_biplot(
winePCA, geom = "point",
col.ind = wine.class,
col.var = "#c07d44", pointsize = 2.5, labelsize = 7,
addEllipses = TRUE, ellipse.level = 0.7) +
coord_fixed() + ggtitle("") + ylim(-4, 4) +
scale_fill_brewer(name = "Grape variety", palette = "Set1") +
scale_color_brewer(name = "Grape variety", palette = "Set1") +
scale_shape_manual(name = "Grape variety", values = c(16, 16, 16)) +
theme(text = element_text(size = 25))
set.seed(98574) #7465
m <- 100
d <- 2
p <- 10
k <- 5
sigma <- 1
muMax <- 25
mu <- matrix(runif(k*d, max = muMax), ncol = d)
X <- lapply(seq_len(k), function(i) {
ix <- rep(1, m) %*% t(mu[i, ]) + matrix(sigma*rnorm(m*d), ncol = d)
return(ix)
})
names(X) <- paste0("Cluster", 1:k)
X.df <- plyr::ldply(X, function(x) x, .id = "Cluster")
X <- as.matrix(X.df[, -1])
#Q <- qr.Q(qr( matrix(rnorm(d*p), nrow = p)))
Y <- X  %*% matrix(rnorm(d*p), ncol = p)
pca.res <- prcomp(Y)
fviz_eig(pca.res)
fviz_pca_ind(pointsize = 2.5,
pca.res, col.ind = X.df$Cluster, geom = "point") +
guides(color=guide_legend(title="Membership"),
shape=guide_legend(title="Membership")) +
coord_fixed() +
ggtitle("") + theme(text = element_text(size = 25))
set.seed(7365)
n <- 500
p <- 10
sigma <- 0.01
t <- sort(c(seq(0, 1, length.out = 100), runif(n-100)))
K <- exp(-as.matrix(dist(t))) + diag(rep(sigma, n))
Q <- qr.Q(qr(matrix(rnorm(n*n), ncol = n)))
E <- 0.05*matrix(rnorm(n*n), ncol = n)
X <- (K + E) %*% Q[, seq_len(p)]
pca.res <- prcomp(X)
fviz_eig(pca.res)
fviz_pca_ind(pca.res, col.ind = t, geom = "point", pointsize = 2.5) +
coord_fixed() +
scale_color_viridis(name = "Depth") +
ggtitle("") + theme(text = element_text(size = 25))
set.seed(123)
library(ade4)
n_copies <- 5
n <- 20
p <- 5
sigma <- 5
M <- matrix(rnorm(n*p, sd = sigma), nrow = n)
E.lst <- lapply(seq_len(n_copies), function(x) matrix(rnorm(n*p), nrow = n))
M.lst <- lapply(E.lst, function(E) {data.frame(M + E)})
# ktab <- ktab.list.df(M.lst)
# statis.res <- statis(ktab, scannf = FALSE, nf = 2)
D.lst <- lapply(M.lst, function(x) as.matrix(dist(x)))
D.arr <- abind::abind(D.lst, along = 3)
distatis.res <- DistatisR::distatis(D.arr, nfact2keep = n)
df <- distatis.res$res4Splus$PartialF %>%
reshape2::melt(varnames = c("SampleID", "FactorID", "TableID")) %>%
spread(key = "FactorID", value = "value") %>%
mutate(SampleID = factor(SampleID))
consensus.df <- data.frame(
SampleID = factor(seq_len(nrow(distatis.res$res4Splus$F))),
distatis.res$res4Splus$F, check.names = FALSE)
cols <- colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))(n)
ggplot(
data = consensus.df,
aes(x = `Factor 1`, y = `Factor 2`, fill = SampleID)) +
coord_fixed() + xlab("Factor 1") + ylab("Factor 2") +
geom_point(data = df %>%
mutate(TableID = factor(TableID)),
aes(color = SampleID, shape = TableID),
alpha= 0.8, size  = 3) +
geom_point(color = "black", size = 5, pch = 23) +
theme(legend.position = "bottom",
text = element_text(size = 25)) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
theme(legend.direction = "horizontal") +
theme(legend.position = "bottom") +
theme(legend.box = "vertical")
set.seed(123)
n_copies <- 200
n <- 20
p <- 10
d <- 2
sigma <- 10
X0 <- matrix(rnorm(n*d, sd=sigma), ncol = d)
tmp <- matrix(rnorm(p*p, mean = 0, sd = sigma), ncol = p)
tmp.qr <- qr(tmp)
Q <- qr.Q(tmp.qr, complete=TRUE)
X0 <- X0 %*% t(Q[, seq_len(d)])
res0 <- prcomp(X0)
eigs <- res0$sdev^2/sum(res0$sdev^2)
Y0 <- res0$x[, seq_len(d)]
Y0.df <- data.frame(SampleID = seq_len(n), Y0)
Y.lst <- list()
for(i in seq_len(n_copies)) {
idx <- unique(sort(sample(seq_len(n), n, replace = TRUE)))
res <- prcomp(X0[idx, ])
res.proc <- vegan::procrustes(Y0[idx, ], res$x[, seq_len(d)])
Y.df <- data.frame(SampleID = idx, res.proc$Yrot)
Y.lst[[i]] <- Y.df
}
names(Y.lst) <- seq_len(n_copies)
xaringan:::inf_mr()
Y.lst.df <- plyr::ldply(Y.lst, .fun = function(x) x, .id = "BootID")
table(Y.lst.df$SampleID)
pairs(diamonds)
head(diamonds)
plot(carat, price, diamonds)
plot(carat, price, data=diamonds)
plot(x=carat, y=price, data=diamonds)
?plot
plot(diamonds$carat, diamonds$price)
head(diamonds)
?diamonds
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point() +
geom_hex()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point() +
geom_hex()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_hex()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_hex()
data(diamonds)
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point() +
scale_y_log10()
diamonds %>%
ggplot(aes(x = carat, y = price, color=clarity)) +
geom_point() +
scale_x_log10()
object.size(p)
knitr::include_graphics("img/Git_data_flow.png")
here::here()
sessionInfo()
xaringan:::inf_mr()
xaringan:::inf_mr()
xaringan:::inf_mr()
sessionInfo()
